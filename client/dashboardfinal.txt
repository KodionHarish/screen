// dashboard.js - Enhanced version with notification icon system
let socket = null;
let currentUserId = null;
const userInfo = document.getElementById("userInfo");
const logoutBtn = document.getElementById("logoutBtn");

// ‚úÖ Tracking control elements
let trackingToggleBtn = null;
let trackingStatusDiv = null;
let trackingTimeDiv = null;
let isTrackingActive = false;

// ‚úÖ Notification system elements
let notificationIcon = null;
let notificationPanel = null;
let notificationBadge = null;
let notifications = [];
let unreadCount = 0;

// ‚úÖ Time formatting utility
function formatTime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  if (hours > 0) {
    return `${hours}h ${minutes}m ${secs}s`;
  } else if (minutes > 0) {
    return `${minutes}m ${secs}s`;
  } else {
    return `${secs}s`;
  }
}

// ‚úÖ Update tracking display
function updateTrackingDisplay(data) {
  if (trackingStatusDiv) {
    trackingStatusDiv.innerHTML = `
      <div class="status-dot ${isTrackingActive ? 'active' : 'inactive'}"></div>
      <span>${isTrackingActive ? 'Currently Active' : 'Currently Inactive'}</span>
    `;
  }
  
  if (trackingTimeDiv && data.totalTime !== undefined) {
    trackingTimeDiv.innerHTML = `
      <div class="time-value">${formatTime(data.totalTime)}</div>
      <div class="time-label">Total Time</div>
      ${data.currentSessionTime > 0 ? 
        `<div class="session-time">Session: ${formatTime(data.currentSessionTime)}</div>` : 
        ''
      }
    `;
  }
  
  if (trackingToggleBtn) {
    trackingToggleBtn.textContent = isTrackingActive ? "‚èπÔ∏è Stop Tracking" : "üöÄ Start Tracking";
    trackingToggleBtn.className = `tracking-button ${isTrackingActive ? 'stop' : 'start'}`;
  }
}

// ‚úÖ Handle tracking toggle
async function toggleTracking() {
  try {
    trackingToggleBtn.disabled = true;
    trackingToggleBtn.textContent = "Processing...";
    
    const result = await window.electronAPI.toggleTracking();
    
    if (result.success) {
      isTrackingActive = result.isActive;
      updateTrackingDisplay({ totalTime: result.totalTime });
      console.log(`‚úÖ Tracking ${isTrackingActive ? "started" : "stopped"}`);
      
      // Emit tracking status to server
      if (socket && currentUserId) {
        socket.emit("user-tracking-status", {
          userId: currentUserId,
          isTracking: isTrackingActive
        });
      }
    } else {
      console.error("‚ùå Failed to toggle tracking:", result.error);
      addNotification("Error", "Failed to toggle tracking. Please try again.", "error");
    }
  } catch (error) {
    console.error("‚ùå Error toggling tracking:", error);
    addNotification("Error", "An error occurred. Please try again.", "error");
  } finally {
    trackingToggleBtn.disabled = false;
  }
}

// ‚úÖ Handle memo input changes
async function handleMemoChange(event) {
  const memoText = event.target.value.trim();
  try {
    await window.electronAPI.setMemo(memoText);
    console.log("‚úÖ Memo updated:", memoText);
  } catch (error) {
    console.error("‚ùå Error updating memo:", error);
  }
}

// ‚úÖ Add notification to system
function addNotification(title, message, type = "info") {
  const notification = {
    id: Date.now(),
    title,
    message,
    type,
    timestamp: new Date(),
    read: false
  };
  
  notifications.unshift(notification);
  unreadCount++;
  
  updateNotificationBadge();
  updateNotificationPanel();
  
  // Show system notification if available
  if (window.electronAPI && window.electronAPI.showNotification) {
    window.electronAPI.showNotification(title, message).catch(console.error);
  }
}

// ‚úÖ Update notification badge
function updateNotificationBadge() {
  if (notificationBadge) {
    if (unreadCount > 0) {
      notificationBadge.style.display = 'block';
      notificationBadge.textContent = unreadCount > 99 ? '99+' : unreadCount.toString();
    } else {
      notificationBadge.style.display = 'none';
    }
  }
}

// ‚úÖ Format notification timestamp
function formatTimestamp(date) {
  const now = new Date();
  const diff = now - date;
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(diff / 3600000);
  const days = Math.floor(diff / 86400000);
  
  if (minutes < 1) return 'Just now';
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  return `${days}d ago`;
}

// ‚úÖ Update notification panel content
function updateNotificationPanel() {
  if (!notificationPanel) return;
  
  const notificationsList = notificationPanel.querySelector('.notifications-list');
  
  if (notifications.length === 0) {
    notificationsList.innerHTML = `
      <div class="no-notifications">
        <div class="no-notifications-icon">üîî</div>
        <p>No notifications yet</p>
      </div>
    `;
    return;
  }
  
  notificationsList.innerHTML = notifications.map(notification => `
    <div class="notification-item ${notification.read ? 'read' : 'unread'}" data-id="${notification.id}">
      <div class="notification-content">
        <div class="notification-header">
          <span class="notification-title">${notification.title}</span>
          <span class="notification-time">${formatTimestamp(notification.timestamp)}</span>
        </div>
        <div class="notification-message">${notification.message}</div>
      </div>
      <div class="notification-actions">
        ${!notification.read ? '<button class="mark-read-btn" onclick="markAsRead(' + notification.id + ')">‚úì</button>' : ''}
        <button class="delete-notification-btn" onclick="deleteNotification(' + notification.id + ')">üóëÔ∏è</button>
      </div>
    </div>
  `).join('');
}

// ‚úÖ Toggle notification panel
function toggleNotificationPanel() {
  if (!notificationPanel) return;
  
  const isVisible = notificationPanel.style.display === 'block';
  
  if (isVisible) {
    notificationPanel.style.display = 'none';
  } else {
    notificationPanel.style.display = 'block';
    // Mark all notifications as read when panel is opened
    markAllAsRead();
  }
}

// ‚úÖ Mark notification as read
function markAsRead(notificationId) {
  const notification = notifications.find(n => n.id === notificationId);
  if (notification && !notification.read) {
    notification.read = true;
    unreadCount = Math.max(0, unreadCount - 1);
    updateNotificationBadge();
    updateNotificationPanel();
  }
}

// ‚úÖ Mark all notifications as read
function markAllAsRead() {
  notifications.forEach(notification => {
    if (!notification.read) {
      notification.read = true;
    }
  });
  unreadCount = 0;
  updateNotificationBadge();
  updateNotificationPanel();
}

// ‚úÖ Delete notification
function deleteNotification(notificationId) {
  const index = notifications.findIndex(n => n.id === notificationId);
  if (index !== -1) {
    const notification = notifications[index];
    if (!notification.read) {
      unreadCount = Math.max(0, unreadCount - 1);
    }
    notifications.splice(index, 1);
    updateNotificationBadge();
    updateNotificationPanel();
  }
}

// ‚úÖ Clear all notifications
function clearAllNotifications() {
  notifications = [];
  unreadCount = 0;
  updateNotificationBadge();
  updateNotificationPanel();
}

// ‚úÖ Initialize socket connection
function initializeSocket(userId) {
  currentUserId = userId;
  
  socket = io("http://localhost:5000", {
    query: { userId: userId },
    withCredentials: true
  });

  // Handle connection events
  socket.on('connect', () => {
    console.log('‚úÖ Connected to server');
    // Emit user online status
    socket.emit("user-online", { userId: currentUserId });
  });

  socket.on('disconnect', () => {
    console.log('‚ùå Disconnected from server');
  });

  // ‚úÖ Enhanced notification handling - now adds to notification system instead of showing modal
  socket.on("notify-message", (notification) => {
    console.log("üì• Received notification:", notification);
    addNotification(
      notification.title || "Admin Message",
      notification.message,
      "admin"
    );
  });

  // Handle status updates
  socket.on("status-updated", (data) => {
    console.log("üìä Status updated:", data);
  });

  socket.on("toggle-updated", (data) => {
    console.log("üì¢ Toggle update received from admin:", data); // <- MUST log this
    const msg = data.toggled
      ? "üîì Admin has <b>enabled</b> your tracking."
      : "üîí Admin has <b>disabled</b> your tracking.";

    addNotification("Tracking Status Changed", msg, "info");
    showAdminTrackingBanner(msg); // <- This is what updates the banner
  });


  // Handle connection errors
  socket.on('connect_error', (error) => {
    console.error('‚ùå Socket connection error:', error);
  });
}

// ‚úÖ Create notification styles
function createNotificationStyles() {
  const style = document.createElement('style');
  style.textContent = `
    /* Notification Icon Styles */
    .notification-icon-container {
      position: relative;
      cursor: pointer;
      padding: 8px;
      border-radius: 8px;
      transition: background-color 0.2s ease;
      margin-right: 12px;
    }
    
    .notification-icon-container:hover {
      background-color: rgba(0, 123, 255, 0.1);
    }
    
    .notification-icon {
      font-size: 20px;
      color: #007bff;
    }
    
    .notification-badge {
      position: absolute;
      top: -2px;
      right: -2px;
      background: #dc3545;
      color: white;
      font-size: 10px;
      font-weight: bold;
      padding: 2px 6px;
      border-radius: 10px;
      min-width: 16px;
      height: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    
    /* Notification Panel Styles */
    .notification-panel {
      position: absolute;
      top: 50px;
      right: 20px;
      width: 380px;
      max-height: 500px;
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
      border: 1px solid #e0e0e0;
      z-index: 1000;
      display: none;
      overflow: hidden;
    }
    
    .notification-panel-header {
      padding: 16px 20px;
      border-bottom: 1px solid #f0f0f0;
      background: #f8f9fa;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .notification-panel-title {
      font-size: 16px;
      font-weight: 600;
      color: #333;
    }
    
    .notification-panel-actions {
      display: flex;
      gap: 8px;
    }
    
    .clear-all-btn {
      background: #6c757d;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    
    .clear-all-btn:hover {
      background: #545b62;
    }
    
    .notifications-list {
      max-height: 400px;
      overflow-y: auto;
    }
    
    .notification-item {
      padding: 16px 20px;
      border-bottom: 1px solid #f0f0f0;
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      transition: background-color 0.2s ease;
    }
    
    .notification-item:hover {
      background-color: #f8f9fa;
    }
    
    .notification-item.unread {
      background-color: #e7f3ff;
      border-left: 3px solid #007bff;
    }
    
    .notification-content {
      flex: 1;
      margin-right: 12px;
    }
    
    .notification-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 4px;
    }
    
    .notification-title {
      font-weight: 600;
      color: #333;
      font-size: 14px;
    }
    
    .notification-time {
      font-size: 12px;
      color: #666;
    }
    
    .notification-message {
      color: #555;
      font-size: 13px;
      line-height: 1.4;
    }
    
    .notification-actions {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
    
    .mark-read-btn, .delete-notification-btn {
      background: none;
      border: none;
      cursor: pointer;
      padding: 4px;
      border-radius: 4px;
      font-size: 12px;
      transition: background-color 0.2s ease;
    }
    
    .mark-read-btn {
      color: #28a745;
    }
    
    .mark-read-btn:hover {
      background-color: rgba(40, 167, 69, 0.1);
    }
    
    .delete-notification-btn {
      color: #dc3545;
    }
    
    .delete-notification-btn:hover {
      background-color: rgba(220, 53, 69, 0.1);
    }
    
    .no-notifications {
      text-align: center;
      padding: 40px 20px;
      color: #666;
    }
    
    .no-notifications-icon {
      font-size: 32px;
      margin-bottom: 12px;
      opacity: 0.5;
    }
    
    .no-notifications p {
      margin: 0;
      font-size: 14px;
    }
    
    /* Header section styling */
    .header-sec {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .header-sec .header h1 {
      margin: 0 0 0.5rem 0;
      color: #333;
      font-size: 2rem;
    }
    
    .header-sec .header p {
      margin: 0;
      color: #666;
      font-size: 1rem;
    }
    
    .logout-section {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .logout-button {
      background: #dc3545;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: background-color 0.2s ease;
    }
    
    .logout-button:hover {
      background: #c82333;
    }
.admin-banner {
  margin: 0 auto 1rem auto; /* Center align + bottom margin */
  padding: 12px 16px;
  background-color: #d1ecf1;
  color: #0c5460;
  border-left: 4px solid #17a2b8;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  transition: opacity 0.5s ease;
  max-width: 90%;
  width: fit-content;
  display: none; /* default hidden */
  overflow: hidden;
}


  `;
  
  document.head.appendChild(style);
}
window.electronAPI.onToggleUpdated(({ toggled }) => {
  console.log("üö¶ Real-time toggle changed:", toggled);

  const msg = toggled
    ? "üîì Admin has <b>enabled</b> your tracking."
    : "üîí Admin has <b>disabled</b> your tracking.";

  addNotification("Tracking Status Changed", msg, "info");
  showAdminTrackingBanner(msg);
});

function showAdminTrackingBanner(message) {
  const banner = document.getElementById("adminToggleBanner");
  if (banner && message.trim()) {
    banner.innerHTML = message;
    banner.style.display = "block";
    banner.style.opacity = "1";

    setTimeout(() => {
      banner.style.opacity = "0";
      setTimeout(() => {
        banner.style.display = "none";
      }, 500);
    }, 5000);
  }
}



  // ‚úÖ Main initialization function
  (async () => {
    try {
      const token = await window.electronAPI.getToken();
      if (!token) {
        window.location.href = "login.html";
        return;
      }

      // Load user profile
      const res = await fetch("http://localhost:5000/api/users/profile", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      if (!res.ok) {
        throw new Error('Failed to load user profile');
      }
      
      const jsonData = await res.json();
      const data = jsonData.data;
      
      // Get current user ID and initialize socket
      const userId = await window.electronAPI.getUserId();
      initializeSocket(userId);
      
      // Get current tracking status
      const trackingStatus = await window.electronAPI.getTrackingStatus();
      console.log('üìä Current tracking status:', trackingStatus);
      isTrackingActive = trackingStatus.isActive;

      // Create notification styles
      createNotificationStyles();

      // Render dashboard UI with notification system
      userInfo.innerHTML = `
        <div class="dashboard-container">
          <div class="header-sec">
            <div class="header">
              <h3>‚ú® Welcome Back, ${data.name}!</h3>
              <p>Track your productivity with style</p>
            </div>
            <div class="logout-section">
              <div class="notification-icon-container" id="notificationIcon">
                <span class="notification-icon">üîî</span>
                <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
              </div>
              <button class="logout-button" id="logoutBtn">
                üö™ Logout
              </button>
            </div>
          </div>
          
          <!-- Notification Panel -->
          <div class="notification-panel" id="notificationPanel">
            <div class="notification-panel-header">
              <span class="notification-panel-title">Notifications</span>
              <div class="notification-panel-actions">
                <button class="clear-all-btn" onclick="clearAllNotifications()">Clear All</button>
              </div>
            </div>
            <div class="notifications-list">
              <div class="no-notifications">
                <div class="no-notifications-icon">üîî</div>
                <p>No notifications yet</p>
              </div>
            </div>
          </div>
          <div id="adminToggleBanner" class="admin-banner" ></div>
          
          <div class="content">
            <div class="user-card">
              <h3><span class="icon">üë§</span> Profile</h3>
              <div class="user-info">
                <div class="info-item">
                  <span class="info-label">Name:</span>
                  <span class="info-value">${data.name}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Email:</span>
                  <span class="info-value">${data.email}</span>
                </div>
                <div class="info-item">
                  <span class="info-label">Role:</span>
                  <span class="info-value">${data.designation}</span>
                </div>
              </div>
            </div>

            <div class="tracking-card">
              <div class="time-display" id="trackingTimeDisplay">
                <div class="time-value">${formatTime(trackingStatus.totalTime || 0)}</div>
                <div class="time-label">Total Time</div>
              </div>
              
              <button class="tracking-button ${isTrackingActive ? 'stop' : 'start'}" id="trackingToggleBtn">
                ${isTrackingActive ? '‚èπÔ∏è Stop Tracking' : 'üöÄ Start Tracking'}
              </button>
              
              <div class="status-indicator ${isTrackingActive ? 'active' : 'inactive'}" id="trackingStatusDisplay">
                <div class="status-dot ${isTrackingActive ? 'active' : 'inactive'}"></div>
                <span>${isTrackingActive ? 'Currently Active' : 'Currently Inactive'}</span>
              </div>
            </div>

            <div class="memo-card">
              <h3><span class="icon">üìù</span> What are you working on?</h3>
              <textarea 
                id="memoInput"
                class="memo-input" 
                placeholder="Describe your current task or project..."
                rows="3"
              ></textarea>
            </div>
          </div>
        </div>
      `;

      // Get references to elements
      trackingToggleBtn = document.getElementById("trackingToggleBtn");
      trackingStatusDiv = document.getElementById("trackingStatusDisplay");
      trackingTimeDiv = document.getElementById("trackingTimeDisplay");
      notificationIcon = document.getElementById("notificationIcon");
      notificationPanel = document.getElementById("notificationPanel");
      notificationBadge = document.getElementById("notificationBadge");
      const memoInput = document.getElementById("memoInput");
      const newLogoutBtn = document.getElementById("logoutBtn");

      // Set up notification icon click handler
      if (notificationIcon) {
        notificationIcon.addEventListener("click", (e) => {
          e.stopPropagation();
          toggleNotificationPanel();
        });
      }

      // Close notification panel when clicking outside
      document.addEventListener("click", (e) => {
        if (notificationPanel && 
            notificationPanel.style.display === 'block' && 
            !notificationPanel.contains(e.target) && 
            !notificationIcon.contains(e.target)) {
          notificationPanel.style.display = 'none';
        }
      });

      // Set up memo input handler
      if (memoInput) {
        memoInput.addEventListener("input", handleMemoChange);
        
        // Load existing memo if any
        try {
          const existingMemo = await window.electronAPI.getMemo();
          if (existingMemo) {
            memoInput.value = existingMemo;
          }
        } catch (error) {
          console.error("‚ùå Error loading existing memo:", error);
        }
      }

      // Add event listener to toggle button
      if (trackingToggleBtn) {
        trackingToggleBtn.addEventListener("click", toggleTracking);
      }

      // Set up logout handler
      if (newLogoutBtn) {
        newLogoutBtn.addEventListener("click", async () => {
          try {
            console.log("üö™ Logging out user...");
            
            // Emit logout event to socket
            if (socket && currentUserId) {
              socket.emit("user-logout", { userId: currentUserId });
            }
            
            // Clear token and disconnect socket
            await window.electronAPI.clearToken();
            if (socket) {
              socket.disconnect();
            }
            
            // Remove event listeners
            window.electronAPI.removeAllListeners();
            
            // Redirect to login
            window.location.href = "login.html";
          } catch (error) {
            console.error("‚ùå Error during logout:", error);
            window.location.href = "login.html";
          }
        });
      }

      // ‚úÖ Listen for tracking status changes from electron
      window.electronAPI.onTrackingStatusChanged((data) => {
        console.log("üìä Tracking status changed:", data);
        isTrackingActive = data.isActive;
        updateTrackingDisplay(data);
        
        // Emit status to server
        if (socket && currentUserId) {
          socket.emit("user-tracking-status", {
            userId: currentUserId,
            isTracking: isTrackingActive
          });
        }
      });

      // ‚úÖ Listen for real-time time updates
      window.electronAPI.onTrackingTimeUpdate((data) => {
        console.log("‚è±Ô∏è Time update:", data);
        updateTrackingDisplay(data);
      });

      console.log("‚úÖ Dashboard loaded successfully");

      // Add a welcome notification for testing
      setTimeout(() => {
        addNotification("Welcome!", `Hello ${data.name}! Your dashboard is ready.`, "info");
      }, 1000);

    } catch (err) {
      console.error("‚ùå Error loading dashboard:", err);
      addNotification("Error", "Failed to load dashboard. Redirecting to login...", "error");
      setTimeout(() => {
        window.location.href = "login.html";
      }, 2000);
    }
  })();

  // ‚úÖ Clean up event listeners and socket when page unloads
  window.addEventListener("beforeunload", () => {
    if (socket) {
      socket.disconnect();
    }
    if (window.electronAPI && window.electronAPI.removeAllListeners) {
      window.electronAPI.removeAllListeners();
    }
  });

  // ‚úÖ Handle page visibility changes (when user minimizes/maximizes window)
  document.addEventListener('visibilitychange', () => {
    if (socket && currentUserId) {
      if (document.hidden) {
        console.log("üîÑ Page hidden, maintaining socket connection");
      } else {
        console.log("üîÑ Page visible, ensuring socket connection");
        if (!socket.connected) {
          socket.connect();
        }
      }
    }
  });

  // Make functions available globally for onclick handlers
  window.markAsRead = markAsRead;
  window.deleteNotification = deleteNotification;
  window.clearAllNotifications = clearAllNotifications;